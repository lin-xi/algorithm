{"dependencies":[{"name":"./page.less","dynamic":true},{"name":"./shellSort.ts","dynamic":true}],"generated":{"html":"<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\">\n  <meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n  <meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\">\n  <meta content=\"telephone=no\" name=\"format-detection\">\n  <meta content=\"email=no\" name=\"format-detection\">\n  <meta name=\"msapplication-tap-highlight\" content=\"no\">\n  <title>shellSort</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/page.f6d5e738.css\">\n</head>\n\n<body>\n  <h1>希尔排序</h1>\n  <ul>\n    <h3>希尔排序,也叫递减增量排序，是插入排序的一种更高效的改进版本。希尔排序是不稳定的排序算法</h3>\n    <li> 希尔排序是基于插入排序的以下两点性质而提出改进方法的：</li>\n    <li> 插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率</li>\n    <li> 但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li>\n    <li> 希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素可以一次性地朝最终位置前进一大步。然后算法再取越来越小的步长进行排序，算法的最后一步就是普通的插入排序，但是到了这步，需排序的数据几乎是已排好的了（此时插入排序较快）。</li>\n  </ul>\n  <pre>\n    <code>\n      function shellSort(arr: Array<number>): [Array<number>, number] {\n        let cnt: number = 0\n        let len = arr.length\n      \n        let gap = Math.floor(len / 2)\n        while (gap > 0) {\n          cnt++\n          for (let i: number = gap; i < len; i++) {\n            cnt++\n            let j = i;\n            while (j >= 0 && arr[j] < arr[j - 1]) {\n              cnt++\n              [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]]\n              j -= gap\n            }\n          }\n          gap = Math.floor(gap / 2)\n        }\n        return [arr, cnt]\n      }\n    </number></number></code>\n  </pre>\n  <div class=\"playground\">\n    <div class=\"edit\">\n      <p>输入：</p>\n      <textarea id=\"input\">5,39,9,32,20,25,18,3,40,23,45,26,16,1,44,0,46,33,2,28,49,24,15,31,41,27,38,6,47,14,12,36,11,7,21,42,19,9,50,34,48,37,10,22,13,4,8,17,29,30,43,35</textarea>\n      <a class=\"button\">100000次 排序</a>\n    </div>\n    <div class=\"view\">\n      <div>\n        <p>结果：</p>\n        <textarea id=\"result\"></textarea>\n      </div>\n      <div>\n        耗时：\n        <span id=\"time\"></span>\n        循环次数：\n        <span id=\"count\"></span>\n      </div>\n    </div>\n  </div>\n  <script src=\"/shellSort.5a818238.js\"></script>\n  <script type=\"text/javascript\">\n\n    document.querySelector('.button').addEventListener('click', () => {\n      let start = Date.now()\n      let result;\n\n      for (let i = 0; i < 100000; i++) {\n        let arr = document.querySelector('#input').value.split(',')\n        arr = arr.map(item => {\n          return parseInt(item)\n        })\n        result = window.shellSort(arr)\n      }\n      document.querySelector('#result').innerText = result[0].join(',')\n      document.querySelector('#time').innerText = (Date.now() - start) / 100000\n      document.querySelector('#count').innerText = result[1]\n\n    })\n  </script>\n\n</body>\n\n</html>"},"hash":"2e9150c44afc93c369adfdddb7e821fc","cacheData":{}}